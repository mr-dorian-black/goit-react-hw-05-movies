{"version":3,"file":"static/js/441.9e1ce816.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAU,CACdC,OAAQ,mBACRC,cACE,8NAGEC,EAAY,IAAIC,gBAAgB,CACpCC,SAAU,UAGCC,EAAW,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAMC,GAAU,IAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAClBhB,EAAAA,EAAAA,IAAU,qBAADiB,OACTb,EAAUc,YAC/B,CACEjB,QAASA,EACTkB,OAAQP,IAEV,KAAD,EANa,OAARC,EAAQC,EAAAM,KAAAN,EAAAO,OAAA,SAQPR,EAASS,MAAI,wBAAAR,EAAAS,OAAA,GAAAZ,EAAA,KACrB,gBAVuBa,GAAA,OAAAhB,EAAAiB,MAAA,KAAAC,UAAA,KAYXC,EAAY,eAAAC,GAAAnB,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAmB,EAAOC,EAAIlB,GAAU,IAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAqB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,cAAAe,EAAAf,KAAA,EACxBhB,EAAAA,EAAAA,IAAU,UAADiB,OAAWa,EAAE,KAAAb,OAAIb,EAAUc,YAAc,CACvEjB,QAASA,EACTkB,OAAQP,IACP,KAAD,EAHY,OAARC,EAAQkB,EAAAX,KAAAW,EAAAV,OAAA,SAKPR,EAASS,MAAI,wBAAAS,EAAAR,OAAA,GAAAM,EAAA,KACrB,gBAPwBG,EAAAC,GAAA,OAAAL,EAAAH,MAAA,KAAAC,UAAA,KASZQ,EAAgB,eAAAC,GAAA1B,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAA0B,EAAON,EAAIlB,GAAU,IAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAA2B,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cAAAqB,EAAArB,KAAA,EAC5BhB,EAAAA,EAAAA,IAAU,UAADiB,OACpBa,EAAE,aAAAb,OAAYb,EAAUc,YAClC,CACEjB,QAASA,EACTkB,OAAQP,IAEV,KAAD,EANa,OAARC,EAAQwB,EAAAjB,KAAAiB,EAAAhB,OAAA,SAQPR,EAASS,MAAI,wBAAAe,EAAAd,OAAA,GAAAa,EAAA,KACrB,gBAV4BE,EAAAC,GAAA,OAAAJ,EAAAV,MAAA,KAAAC,UAAA,KAYhBc,EAAmB,eAAAC,GAAAhC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAgC,EAAOZ,EAAIlB,GAAU,IAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAiC,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,cAAA2B,EAAA3B,KAAA,EAC/BhB,EAAAA,EAAAA,IAAU,UAADiB,OACpBa,EAAE,aAAAb,OAAYb,EAAUc,YAClC,CACEjB,QAASA,EACTkB,OAAQP,IAEV,KAAD,EANa,OAARC,EAAQ8B,EAAAvB,KAAAuB,EAAAtB,OAAA,SAQPR,EAASS,MAAI,wBAAAqB,EAAApB,OAAA,GAAAmB,EAAA,KACrB,gBAV+BE,EAAAC,GAAA,OAAAJ,EAAAhB,MAAA,KAAAC,UAAA,KAYnBoB,EAAW,eAAAC,GAAAtC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAsC,EAAOC,EAAOrC,GAAU,IAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAwC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,OAGrB,OAF5BZ,EAAU+C,OAAO,QAASF,GAC1B7C,EAAU+C,OAAO,iBAAiB,GAClC/C,EAAU+C,OAAO,OAAQ,GAAGD,EAAAlC,KAAA,EAELhB,EAAAA,EAAAA,IAAU,iBAADiB,OAAkBb,EAAUc,YAAc,CACxEjB,QAASA,EACTkB,OAAQP,IACP,KAAD,EAHY,OAARC,EAAQqC,EAAA9B,KAAA8B,EAAA7B,OAAA,SAKPR,EAASS,MAAI,wBAAA4B,EAAA3B,OAAA,GAAAyB,EAAA,KACrB,gBAXuBI,EAAAC,GAAA,OAAAN,EAAAtB,MAAA,KAAAC,UAAA,I,gLCzDX4B,EAAYC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0FAOrBC,EAAYH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qEAMrBG,EAAWL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,+B,SCuElC,EA/EkB,WAChB,IAAAK,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA0BL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAlCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAA8BT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAElBG,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,GAAgBC,EAAAA,EAAAA,UAChBC,EAAkB,WAClBF,EAAcG,SAChBH,EAAcG,QAAQC,OAE1B,GAEAC,EAAAA,EAAAA,YAAU,WACyB,SAAAC,IAmBhC,OAnBgCA,GAAA3E,EAAAA,EAAAA,GAAAC,IAAAA,MAAjC,SAAAC,IAAA,IAAAE,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAMqB,OALnBgE,IAEAF,EAAcG,QAAU,IAAII,gBAAkBvE,EAAAC,KAAA,EAG5C4D,GAAW,GAAM7D,EAAAE,KAAA,GACMkB,EAAAA,EAAAA,IACrB0C,EACAE,EAAcG,QAAQ9D,QACtB,KAAD,EAHKN,EAAQC,EAAAM,KAId+C,EAAQtD,EAASqD,MAAMpD,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAwE,GAAAxE,EAAA,SAEJ,iBAAfA,EAAAwE,GAAMC,MACRhB,GAAS,GACV,QAEiB,OAFjBzD,EAAAC,KAAA,GAED4D,GAAW,GAAO7D,EAAA0E,OAAA,6BAAA1E,EAAAS,OAAA,GAAAZ,EAAA,0BAErBc,MAAA,KAAAC,UAAA,CAGD,OAvBe,WACkB0D,EAAA3D,MAAC,KAADC,UAAA,CAoBjC+D,GAEO,kBAAMT,GAAkB,CACjC,GAAG,CAACJ,IAKJ,OACEc,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGtB,IAASuB,EAAAA,EAAAA,KAAA,OAAAD,SAAK,mCACdlB,IACCmB,EAAAA,EAAAA,KAACC,EAAAA,EAAgB,CAAAF,UACfC,EAAAA,EAAAA,KAACE,EAAAA,GAAa,CACZC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,OAIfP,EAAAA,EAAAA,KAACvC,EAAS,CAAAsC,SACP1B,EAAKmC,KAAI,SAAA7F,GAA4C,IAAzCsB,EAAEtB,EAAFsB,GAAIwE,EAAS9F,EAAT8F,UAAWC,EAAI/F,EAAJ+F,KAAMC,EAAYhG,EAAZgG,aAChC,OACEd,EAAAA,EAAAA,MAAChC,EAAS,CAAAkC,SAAA,EACRC,EAAAA,EAAAA,KAACjC,EAAQ,CACP6C,IACED,EAAY,kCAAAvF,OAC0BuF,GAvBpD,wGA0BYE,IAAKH,KAEPV,EAAAA,EAAAA,KAAA,KAAAD,SAAIW,KACJV,EAAAA,EAAAA,KAAA,KAAAD,SAAIU,MAVUxE,EAapB,QAIR,C,qEClFagE,E,OAAmBvC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2G","sources":["api.js","components/movie-cast/movie-cast.styled.js","components/movie-cast/movie-cast.jsx","pages/home/home.styled.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst headers = {\n  accept: 'application/json',\n  Authorization:\n    'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhYzIxMzI1OWMyNWJiNmQxMjdhNDA1Y2UyNDUxZDQ2YiIsInN1YiI6IjY1NTRhYjZhZWE4NGM3MTA5NmRjZDhhNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.U3v4fXFdcGFn9M0xih4Y_mQdTwg1rCD7jhv0rRqmHJQ',\n};\n\nconst urlParams = new URLSearchParams({\n  language: 'en-US',\n});\n\nexport const getTrending = async controller => {\n  const response = await axios.get(\n    `/trending/all/day?${urlParams.toString()}`,\n    {\n      headers: headers,\n      signal: controller,\n    }\n  );\n\n  return response.data;\n};\n\nexport const getMovieById = async (id, controller) => {\n  const response = await axios.get(`/movie/${id}?${urlParams.toString()}`, {\n    headers: headers,\n    signal: controller,\n  });\n\n  return response.data;\n};\n\nexport const getMovieByIdCast = async (id, controller) => {\n  const response = await axios.get(\n    `/movie/${id}/credits?${urlParams.toString()}`,\n    {\n      headers: headers,\n      signal: controller,\n    }\n  );\n\n  return response.data;\n};\n\nexport const getMovieByIdReviews = async (id, controller) => {\n  const response = await axios.get(\n    `/movie/${id}/reviews?${urlParams.toString()}`,\n    {\n      headers: headers,\n      signal: controller,\n    }\n  );\n\n  return response.data;\n};\n\nexport const searchMovie = async (query, controller) => {\n  urlParams.append('query', query);\n  urlParams.append('include_adult', false);\n  urlParams.append('page', 1);\n\n  const response = await axios.get(`/search/movie?${urlParams.toString()}`, {\n    headers: headers,\n    signal: controller,\n  });\n\n  return response.data;\n};\n","import styled from 'styled-components';\n\nexport const ActorList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  list-style: none;\n`;\n\nexport const ActorItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const ActorImg = styled.img`\n  max-width: 150px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useRef, useState, useEffect } from 'react';\nimport { getMovieByIdCast } from 'api';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { LoadingContainer } from 'pages/home/home.styled';\nimport { ActorList, ActorItem, ActorImg } from './movie-cast.styled';\n\nconst MovieCast = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  const controllerRef = useRef();\n  const controllerAbort = () => {\n    if (controllerRef.current) {\n      controllerRef.current.abort();\n    }\n  };\n\n  useEffect(() => {\n    async function fetchMovieByIdCast() {\n      controllerAbort();\n\n      controllerRef.current = new AbortController();\n\n      try {\n        setLoading(true);\n        const response = await getMovieByIdCast(\n          movieId,\n          controllerRef.current.signal\n        );\n        setCast(response.cast);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(true);\n        }\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchMovieByIdCast();\n\n    return () => controllerAbort();\n  }, [movieId]);\n\n  const unknownImg =\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/b/bc/Unknown_person.jpg/694px-Unknown_person.jpg';\n\n  return (\n    <>\n      {error && <div>Error! Please reload the page!</div>}\n      {loading && (\n        <LoadingContainer>\n          <RotatingLines\n            strokeColor=\"grey\"\n            strokeWidth=\"5\"\n            animationDuration=\"0.75\"\n            width=\"96\"\n            visible={true}\n          />\n        </LoadingContainer>\n      )}\n      <ActorList>\n        {cast.map(({ id, character, name, profile_path }) => {\n          return (\n            <ActorItem key={id}>\n              <ActorImg\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : unknownImg\n                }\n                alt={name}\n              />\n              <p>{name}</p>\n              <p>{character}</p>\n            </ActorItem>\n          );\n        })}\n      </ActorList>\n    </>\n  );\n};\n\nexport default MovieCast;\n","import styled from 'styled-components';\n\nexport const LoadingContainer = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50% -50%);\n  z-index: 1;\n`;\n"],"names":["axios","headers","accept","Authorization","urlParams","URLSearchParams","language","getTrending","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","controller","response","_context","prev","next","concat","toString","signal","sent","abrupt","data","stop","_x","apply","arguments","getMovieById","_ref2","_callee2","id","_context2","_x2","_x3","getMovieByIdCast","_ref3","_callee3","_context3","_x4","_x5","getMovieByIdReviews","_ref4","_callee4","_context4","_x6","_x7","searchMovie","_ref5","_callee5","query","_context5","append","_x8","_x9","ActorList","styled","_templateObject","_taggedTemplateLiteral","ActorItem","_templateObject2","ActorImg","_templateObject3","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","error","setError","_useState5","_useState6","loading","setLoading","movieId","useParams","controllerRef","useRef","controllerAbort","current","abort","useEffect","_fetchMovieByIdCast","AbortController","t0","code","finish","fetchMovieByIdCast","_jsxs","_Fragment","children","_jsx","LoadingContainer","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","map","character","name","profile_path","src","alt"],"sourceRoot":""}